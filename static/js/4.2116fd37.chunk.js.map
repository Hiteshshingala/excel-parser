{"version":3,"sources":["views/home/index.js","views/dashboard/index.js"],"names":["Home","props","Container","fluid","barGraphOneData","labels","length","Row","Col","Card","CardBody","data","options","maintainAspectRatio","height","pieGraphOneData","Button","variant","onClick","goToHome","Dashboard","useState","setpieGraphOneData","setbarGraphOneData","barGraphTwoData","setbarGraphTwoData","isDataUpdaloaded","setisDataUpdaloaded","processBarChartData","label","header","barData","datasets","backgroundColor","borderColor","borderWidth","onChangeHandler","event","a","readXlsxFile","target","files","then","rows","console","log","barGeaphLabel2","barGeaphData2","pieLabel","pieData","index","element","push","barData2","_pieData","hoverBackgroundColor","error","removeUpload","$","replaceWith","clone","hide","show","bind","addClass","removeClass","Fragment","className","type","e","trigger","onChange","src","alt"],"mappings":"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","file":"static/js/4.2116fd37.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { Card, Button, Container, Row, Col } from \"react-bootstrap\";\r\nimport { Bar, Pie } from \"react-chartjs-2\";\r\nimport {CardBody, Card, Button, Container, Row, Col} from 'reactstrap';\r\n\r\nconst Home = (props) => {\r\n  return (\r\n    <>\r\n      <Container fluid>\r\n        {props.barGraphOneData &&\r\n          props.barGraphOneData.labels &&\r\n          props.barGraphOneData.labels.length > 0 && (\r\n            <>\r\n              <Row>\r\n                <Col>\r\n                <Card>\r\n                  <CardBody>\r\n                    <Bar\r\n                      data={props.barGraphOneData}\r\n                      options={{ maintainAspectRatio: false }}\r\n                      height={200}\r\n                    />\r\n                  </CardBody>\r\n                </Card>\r\n                </Col>\r\n                <Col>\r\n                <Card>\r\n                  <CardBody>\r\n                  <Pie\r\n                  data={props.pieGraphOneData}\r\n                  options={{ maintainAspectRatio: false }}\r\n                />\r\n                  </CardBody>\r\n                </Card>\r\n                </Col>\r\n              </Row>\r\n              {/* <Row>\r\n                <Col>\r\n                <Card>\r\n                  <CardBody>\r\n                    <Bar\r\n                      data={props.barGraphTwoData}\r\n                      options={{ maintainAspectRatio: false }}\r\n                      height={200}\r\n                    />\r\n                  </CardBody>\r\n                </Card>\r\n                </Col>\r\n                <Col>\r\n                <Card>\r\n                  <CardBody>\r\n                  <Pie\r\n                  data={props.pieGraphOneData}\r\n                  options={{ maintainAspectRatio: false }}\r\n                />\r\n                  </CardBody>\r\n                </Card>\r\n                </Col>\r\n              </Row> */}\r\n            </>\r\n          )}\r\n        <Button variant=\"primary\" onClick={props.goToHome}>\r\n          Go To Home\r\n        </Button>{\" \"}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport readXlsxFile from \"read-excel-file\";\r\nimport $ from \"jquery\";\r\nimport Home from \"../home/index\";\r\n\r\nconst Dashboard = () => {\r\n  const [pieGraphOneData, setpieGraphOneData] = useState([]);\r\n  const [pieGraphTwoData, setpieGraphTwoData] = useState([]);\r\n  const [barGraphOneData, setbarGraphOneData] = useState([]);\r\n  const [barGraphTwoData, setbarGraphTwoData] = useState([]);\r\n  const [isDataUpdaloaded, setisDataUpdaloaded] = useState(false);\r\n\r\n  const processBarChartData = (label, data, header= 'graph') => {\r\n    let barData = {\r\n      labels: label,\r\n      datasets: [\r\n        {\r\n          label: header,\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.6)',\r\n            'rgba(54, 162, 235, 0.6)',\r\n            'rgba(255, 206, 86, 0.6)',\r\n            'rgba(75, 192, 192, 0.6)',\r\n            'rgba(153, 102, 255, 0.6)',\r\n            'rgba(255, 159, 64, 0.6)',\r\n            'rgba(255, 99, 132, 0.6)'\r\n          ],\r\n          borderColor: [\r\n            'rgba(255, 99, 132, 0.6)',\r\n            'rgba(54, 162, 235, 0.6)',\r\n            'rgba(255, 206, 86, 0.6)',\r\n            'rgba(75, 192, 192, 0.6)',\r\n            'rgba(153, 102, 255, 0.6)',\r\n            'rgba(255, 159, 64, 0.6)',\r\n            'rgba(255, 99, 132, 0.6)'\r\n          ],\r\n          borderWidth: 2,\r\n          data: data,\r\n        },\r\n      ],\r\n    };\r\n    return barData;\r\n  }\r\n\r\n  const onChangeHandler = async (event) => {\r\n    try {\r\n      readXlsxFile(event.target.files[0]).then((rows) => {\r\n        console.log('@@@rows', rows);\r\n        \r\n        if (rows && rows.length > 0) {\r\n          let label = [],\r\n          barGeaphLabel2 = [],\r\n          data = [], \r\n          barGeaphData2 = [];\r\n          let pieLabel = [];\r\n          let pieData = [];\r\n          \r\n          for (let index = 0; index < rows.length; index++) {\r\n            const element = rows[index];\r\n            if (index > 2 && index < 9) {\r\n              label.push(element[0]);\r\n              data.push(element[1]);\r\n            }\r\n            // COGS & GP Analysis\r\n            if (index > 11 && index < 16) {\r\n              barGeaphLabel2.push(element[0]);\r\n              barGeaphData2.push(element[1]);\r\n            }\r\n            if (index > 38 && index < 42) {\r\n              pieLabel.push(element[0]);\r\n              pieData.push(element[1]);\r\n            }\r\n          }\r\n          let barData =  processBarChartData(label,data, rows[1][0])\r\n          let barData2 =  processBarChartData(label,data, rows[10][0])\r\n   \r\n\r\n          let _pieData = {\r\n            labels: pieLabel,\r\n            datasets: [\r\n              {\r\n                label: \"Net Profit analysis\",\r\n                backgroundColor: [\r\n                  'rgba(255, 99, 132, 0.6)',\r\n                  'rgba(54, 162, 235, 0.6)',\r\n                  'rgba(255, 206, 86, 0.6)',\r\n                  'rgba(75, 192, 192, 0.6)',\r\n                  'rgba(153, 102, 255, 0.6)',\r\n                  'rgba(255, 159, 64, 0.6)',\r\n                  'rgba(255, 99, 132, 0.6)'\r\n                ],\r\n                hoverBackgroundColor: [\r\n                  'rgba(255, 99, 132, 0.6)',\r\n                  'rgba(54, 162, 235, 0.6)',\r\n                  'rgba(255, 206, 86, 0.6)',\r\n                  'rgba(75, 192, 192, 0.6)',\r\n                  'rgba(153, 102, 255, 0.6)',\r\n                  'rgba(255, 159, 64, 0.6)',\r\n                  'rgba(255, 99, 132, 0.6)'\r\n                ],\r\n                borderWidth: 2,\r\n                data: pieData,\r\n              },\r\n            ],\r\n          };\r\n          setbarGraphOneData(barData);\r\n          setisDataUpdaloaded(true);\r\n          setpieGraphOneData(_pieData)\r\n          setbarGraphTwoData(barData2)\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"@@@@error\", error);\r\n    }\r\n  };\r\n\r\n  const goToHome = () => {\r\n    setisDataUpdaloaded(false);\r\n  }\r\n\r\n  const readURL = async (input) => {\r\n    if (input.files && input.files[0]) {\r\n      var reader = new FileReader();\r\n\r\n      reader.onload = function (e) {\r\n        $(\".image-upload-wrap\").hide();\r\n\r\n        $(\".file-upload-image\").attr(\"src\", e.target.result);\r\n        $(\".file-upload-content\").show();\r\n\r\n        $(\".image-title\").html(input.files[0].name);\r\n      };\r\n\r\n      reader.readAsDataURL(input.files[0]);\r\n    } else {\r\n      removeUpload();\r\n    }\r\n  };\r\n\r\n  const removeUpload = () => {\r\n    $(\".file-upload-input\").replaceWith($(\".file-upload-input\").clone());\r\n    $(\".file-upload-content\").hide();\r\n    $(\".image-upload-wrap\").show();\r\n  };\r\n  $(\".image-upload-wrap\").bind(\"dragover\", function () {\r\n    $(\".image-upload-wrap\").addClass(\"image-dropping\");\r\n  });\r\n  $(\".image-upload-wrap\").bind(\"dragleave\", function () {\r\n    $(\".image-upload-wrap\").removeClass(\"image-dropping\");\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      {!isDataUpdaloaded ? (\r\n        <div className=\"file-upload\">\r\n          <button\r\n            className=\"file-upload-btn\"\r\n            type=\"button\"\r\n            onClick={(e) => {\r\n              $(\".file-upload-input\").trigger(\"click\");\r\n            }}\r\n          >\r\n            Add Image\r\n          </button>\r\n\r\n          <div className=\"image-upload-wrap\">\r\n            <input\r\n              className=\"file-upload-input\"\r\n              type=\"file\"\r\n              onChange={(e) => {\r\n                onChangeHandler(e);\r\n              }}\r\n            />\r\n            <div className=\"drag-text\">\r\n              <h3>Drag and drop a file or select add Image</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"file-upload-content\">\r\n            <img className=\"file-upload-image\" src=\"#\" alt=\"your image\" />\r\n            <div className=\"image-title-wrap\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={removeUpload()}\r\n                className=\"remove-image\"\r\n              >\r\n                Remove <span className=\"image-title\">Uploaded Image</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Home pieGraphOneData={pieGraphOneData} barGraphOneData={barGraphOneData} barGraphTwoData={barGraphTwoData}  goToHome={goToHome}/>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Dashboard;\r\n"],"sourceRoot":""}